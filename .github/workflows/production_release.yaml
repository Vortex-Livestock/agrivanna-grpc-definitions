name: Production Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        type: choice
        description: "Specify the type of version bump: major, minor, or patch"
        options:
          - major
          - minor
          - patch
        default: patch

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      # Step 1: Checkout source code and fetch all branches
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Fetch all branches
        run: git fetch --all --tags

      # Step 2: Extract the current version
      - name: Extract current version
        id: version
        run: |
          current_version=$(git describe --tags --abbrev=0 --tags 2>/dev/null || git tag | tail -n 1 || echo "v0.0.0")
          echo "current_version=$current_version"
          echo "current_version=$current_version" >> $GITHUB_ENV

      # Step 3: Calculate the next version
      - name: Calculate next version
        id: next_version
        run: |
          bump_type="${{ github.event.inputs.bump_type }}"
          current_version="${{ env.current_version }}"
          raw_version="${current_version#v}"

          major=$(echo "$raw_version" | cut -d. -f1)
          minor=$(echo "$raw_version" | cut -d. -f2)
          patch=$(echo "$raw_version" | cut -d. -f3)

          if [ "$bump_type" == "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$bump_type" == "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          next_version="v$major.$minor.$patch"
          echo "next_version=$next_version" >> $GITHUB_ENV
          echo "Next version: $next_version"

      # Step 4: Create the release branch
      - name: Create release branch
        id: create_release_branch
        run: |
          git checkout devel
          git pull origin devel
          release_branch="release/${{ env.next_version }}"
          git checkout -b $release_branch
          git push origin $release_branch
          echo "release_branch=$release_branch" >> $GITHUB_ENV

      # Step 5: Generate proto stubs
      - name: Generate proto stubs
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          export PATH="$PATH:$(go env GOPATH)/bin"
          make proto

      # Step 6: Bump version in README.md
      - name: Bump version in README.md
        run: |
          sed -i "s/\- \[v[0-9]*\.[0-9]*\.[0-9]*\](https:\/\/github.com\/Vortex-Livestock\/agrivanna-grpc-definitions\/releases\/tag\/v[0-9]*\.[0-9]*\.[0-9]*)/\- \[${{ env.next_version }}](https:\/\/github.com\/Vortex-Livestock\/agrivanna-grpc-definitions\/releases\/tag\/${{ env.next_version }})/g" README.md
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "Update README.md with version ${{ env.next_version }}" || echo "No changes to commit"
          git push origin ${{ env.release_branch }}

      # Step 7: Sync release branch with main and devel
      - name: Sync release branch with main and devel
        run: |
          git checkout ${{ env.release_branch }}
          git pull origin main || echo "No changes from main"
          git pull origin devel || echo "No changes from devel"
          git push origin ${{ env.release_branch }}

      # Step 8: Create PR to merge release into main
      - name: Create PR to merge release into main
        id: pr_main
        run: |
          gh pr create \
            --base main \
            --head ${{ env.release_branch }} \
            --title "Release ${{ env.next_version }}" \
            --body "Merging release ${{ env.next_version }} into main" \
            -f
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      # Step 9: Create PR to merge release into devel
      - name: Create PR to merge release into devel
        id: pr_devel
        run: |
          gh pr create \
            --base devel \
            --head ${{ env.release_branch }} \
            --title "Backport release ${{ env.next_version }}" \
            --body "Merging release ${{ env.next_version }} into devel to keep it up to date" \
            -f
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      # Step 10: Merge PR into main
      - name: Merge PR into main
        run: |
          pr_number=$(gh pr list --state open --base main --head ${{ env.release_branch }} --json number --jq ".[0].number")
          gh pr merge $pr_number --squash --admin
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      # Step 11: Merge PR into devel
      - name: Merge PR into devel
        run: |
          pr_number=$(gh pr list --state open --base devel --head ${{ env.release_branch }} --json number --jq ".[0].number")
          gh pr merge $pr_number --squash --admin
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      # Step 12: Tag the release
      - name: Tag the release
        run: |
          git checkout main
          git pull origin main
          git tag ${{ env.next_version }}
          git push origin ${{ env.next_version }}

      # Step 13: Create GitHub Release
      - name: Create GitHub Release
        run: |
          gh release create ${{ env.next_version }} \
            -t "Release ${{ env.next_version }}" \
            --notes-from-tag \
            --target main
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
