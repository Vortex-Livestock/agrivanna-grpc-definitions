name: Production Release Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      bump_type:
        type: choice
        description: "Specify the type of version bump: major, minor, patch"
        options:
          - major
          - minor
          - patch
        default: patch
        required: false

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install Protoc
        uses: arduino/setup-protoc@v3

      - name: Install Buf CLI
        uses: bufbuild/buf-setup-action@v1

      - name: Install Go dependencies
        run: make install

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Generate Go stubs from proto files
        run: make proto

  lint:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Lint the proto files
        uses: bufbuild/buf-lint-action@v1

  tag:
    needs: [build, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Extract Current Version
        id: version
        run: |
          current_version=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "current_version=$current_version" >> $GITHUB_ENV

      - name: Calculate Next Version
        id: next_version
        run: |
          bump_type="${{ github.event.inputs.bump_type || 'patch' }}"
          current_version="${{ env.current_version }}"
          major=$(echo $current_version | cut -d. -f1 | sed 's/v//')
          minor=$(echo $current_version | cut -d. -f2)
          patch=$(echo $current_version | cut -d. -f3)

          if [ "$bump_type" == "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$bump_type" == "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          next_version="v$major.$minor.$patch"
          echo "next_version=$next_version" >> $GITHUB_ENV
          echo "Next version: $next_version"

      - name: Create tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ env.next_version }}
          git push origin ${{ env.next_version }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.next_version }}
          release_name: Release ${{ env.next_version }}
          body: |
            Changes in this release:
            - Auto-generated release notes
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
