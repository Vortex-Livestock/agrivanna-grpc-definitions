name: Production Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        type: choice
        description: "Specify the type of version bump: major, minor, or patch"
        options:
          - major
          - minor
          - patch
        default: patch

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          ref: devel

      - name: Install Protoc
        uses: arduino/setup-protoc@v3

      - name: Install Buf CLI
        uses: bufbuild/buf-setup-action@v1

      - name: Install Go dependencies
        run: make install

      - name: Lint the proto files
        run: buf lint

      - name: Generate proto stubs
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          export PATH="$PATH:$(go env GOPATH)/bin"
          make proto

      - name: Extract current version
        id: version
        run: |
          current_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "current_version=$current_version" >> $GITHUB_ENV

      - name: Calculate next version
        id: next_version
        run: |
          bump_type="${{ github.event.inputs.bump_type }}"
          current_version="${{ env.current_version }}"

          raw_version="${current_version#v}"

          major=$(echo "$raw_version" | cut -d. -f1)
          minor=$(echo "$raw_version" | cut -d. -f2)
          patch=$(echo "$raw_version" | cut -d. -f3)

          if [ "$bump_type" == "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$bump_type" == "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          next_version="v$major.$minor.$patch"
          echo "next_version=$next_version" >> $GITHUB_ENV
          echo "Next version: $next_version"

      - name: Fetch all branches
        run: git fetch --all

      - name: Commit uncommitted changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Auto-generated changes for release ${{ env.next_version }}" || echo "No changes to commit"

      - name: Checkout and prepare branches
        run: |
          git checkout devel
          git pull origin devel
          git checkout main
          git pull origin main
          git checkout devel

      - name: Create PR from devel to main
        run: |
          gh pr create \
            --base main \
            --head devel \
            --title "Bumped version ${{ env.next_version }}" \
            --body "Merging changes for version ${{ env.next_version }} into main" \
            -f
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Merge PR to main
        run: |
          gh pr merge \
            $(gh pr list --state open --base main --head devel --json number --jq ".[0].number") \
            --squash \
            --admin
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Create tag and push
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ env.next_version }}
          git push origin ${{ env.next_version }}

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          gh release create ${{ env.next_version }} \
            -t "Release ${{ env.next_version }}" \
            --notes-from-tag \
            --target main
