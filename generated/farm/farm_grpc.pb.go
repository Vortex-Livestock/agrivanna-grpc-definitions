// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: farm.proto

package farm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FarmService_CreateFarm_FullMethodName       = "/proto.v1.farm.FarmService/CreateFarm"
	FarmService_GetFarm_FullMethodName          = "/proto.v1.farm.FarmService/GetFarm"
	FarmService_GetFarmByOwnerId_FullMethodName = "/proto.v1.farm.FarmService/GetFarmByOwnerId"
	FarmService_UpdateFarm_FullMethodName       = "/proto.v1.farm.FarmService/UpdateFarm"
	FarmService_DeleteFarm_FullMethodName       = "/proto.v1.farm.FarmService/DeleteFarm"
)

// FarmServiceClient is the client API for FarmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FarmServiceClient interface {
	CreateFarm(ctx context.Context, in *CreateFarmRequest, opts ...grpc.CallOption) (*CreateFarmResponse, error)
	GetFarm(ctx context.Context, in *GetFarmRequest, opts ...grpc.CallOption) (*GetFarmResponse, error)
	GetFarmByOwnerId(ctx context.Context, in *GetFarmByOwnerIdRequest, opts ...grpc.CallOption) (*GetFarmByOwnerIdResponse, error)
	UpdateFarm(ctx context.Context, in *UpdateFarmRequest, opts ...grpc.CallOption) (*UpdateFarmResponse, error)
	DeleteFarm(ctx context.Context, in *DeleteFarmRequest, opts ...grpc.CallOption) (*DeleteFarmResponse, error)
}

type farmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFarmServiceClient(cc grpc.ClientConnInterface) FarmServiceClient {
	return &farmServiceClient{cc}
}

func (c *farmServiceClient) CreateFarm(ctx context.Context, in *CreateFarmRequest, opts ...grpc.CallOption) (*CreateFarmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFarmResponse)
	err := c.cc.Invoke(ctx, FarmService_CreateFarm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServiceClient) GetFarm(ctx context.Context, in *GetFarmRequest, opts ...grpc.CallOption) (*GetFarmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFarmResponse)
	err := c.cc.Invoke(ctx, FarmService_GetFarm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServiceClient) GetFarmByOwnerId(ctx context.Context, in *GetFarmByOwnerIdRequest, opts ...grpc.CallOption) (*GetFarmByOwnerIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFarmByOwnerIdResponse)
	err := c.cc.Invoke(ctx, FarmService_GetFarmByOwnerId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServiceClient) UpdateFarm(ctx context.Context, in *UpdateFarmRequest, opts ...grpc.CallOption) (*UpdateFarmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFarmResponse)
	err := c.cc.Invoke(ctx, FarmService_UpdateFarm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServiceClient) DeleteFarm(ctx context.Context, in *DeleteFarmRequest, opts ...grpc.CallOption) (*DeleteFarmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFarmResponse)
	err := c.cc.Invoke(ctx, FarmService_DeleteFarm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FarmServiceServer is the server API for FarmService service.
// All implementations must embed UnimplementedFarmServiceServer
// for forward compatibility.
type FarmServiceServer interface {
	CreateFarm(context.Context, *CreateFarmRequest) (*CreateFarmResponse, error)
	GetFarm(context.Context, *GetFarmRequest) (*GetFarmResponse, error)
	GetFarmByOwnerId(context.Context, *GetFarmByOwnerIdRequest) (*GetFarmByOwnerIdResponse, error)
	UpdateFarm(context.Context, *UpdateFarmRequest) (*UpdateFarmResponse, error)
	DeleteFarm(context.Context, *DeleteFarmRequest) (*DeleteFarmResponse, error)
	mustEmbedUnimplementedFarmServiceServer()
}

// UnimplementedFarmServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFarmServiceServer struct{}

func (UnimplementedFarmServiceServer) CreateFarm(context.Context, *CreateFarmRequest) (*CreateFarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFarm not implemented")
}
func (UnimplementedFarmServiceServer) GetFarm(context.Context, *GetFarmRequest) (*GetFarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFarm not implemented")
}
func (UnimplementedFarmServiceServer) GetFarmByOwnerId(context.Context, *GetFarmByOwnerIdRequest) (*GetFarmByOwnerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFarmByOwnerId not implemented")
}
func (UnimplementedFarmServiceServer) UpdateFarm(context.Context, *UpdateFarmRequest) (*UpdateFarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFarm not implemented")
}
func (UnimplementedFarmServiceServer) DeleteFarm(context.Context, *DeleteFarmRequest) (*DeleteFarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFarm not implemented")
}
func (UnimplementedFarmServiceServer) mustEmbedUnimplementedFarmServiceServer() {}
func (UnimplementedFarmServiceServer) testEmbeddedByValue()                     {}

// UnsafeFarmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FarmServiceServer will
// result in compilation errors.
type UnsafeFarmServiceServer interface {
	mustEmbedUnimplementedFarmServiceServer()
}

func RegisterFarmServiceServer(s grpc.ServiceRegistrar, srv FarmServiceServer) {
	// If the following call pancis, it indicates UnimplementedFarmServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FarmService_ServiceDesc, srv)
}

func _FarmService_CreateFarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).CreateFarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmService_CreateFarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).CreateFarm(ctx, req.(*CreateFarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmService_GetFarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).GetFarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmService_GetFarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).GetFarm(ctx, req.(*GetFarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmService_GetFarmByOwnerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFarmByOwnerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).GetFarmByOwnerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmService_GetFarmByOwnerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).GetFarmByOwnerId(ctx, req.(*GetFarmByOwnerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmService_UpdateFarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).UpdateFarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmService_UpdateFarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).UpdateFarm(ctx, req.(*UpdateFarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmService_DeleteFarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).DeleteFarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FarmService_DeleteFarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).DeleteFarm(ctx, req.(*DeleteFarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FarmService_ServiceDesc is the grpc.ServiceDesc for FarmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FarmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.farm.FarmService",
	HandlerType: (*FarmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFarm",
			Handler:    _FarmService_CreateFarm_Handler,
		},
		{
			MethodName: "GetFarm",
			Handler:    _FarmService_GetFarm_Handler,
		},
		{
			MethodName: "GetFarmByOwnerId",
			Handler:    _FarmService_GetFarmByOwnerId_Handler,
		},
		{
			MethodName: "UpdateFarm",
			Handler:    _FarmService_UpdateFarm_Handler,
		},
		{
			MethodName: "DeleteFarm",
			Handler:    _FarmService_DeleteFarm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "farm.proto",
}
