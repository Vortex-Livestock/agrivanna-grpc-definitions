// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/livestock/v1/health_record.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HealthRecordService_CreateHealthRecord_FullMethodName = "/proto.livestock.v1.HealthRecordService/CreateHealthRecord"
	HealthRecordService_GetHealthRecord_FullMethodName    = "/proto.livestock.v1.HealthRecordService/GetHealthRecord"
	HealthRecordService_UpdateHealthRecord_FullMethodName = "/proto.livestock.v1.HealthRecordService/UpdateHealthRecord"
	HealthRecordService_DeleteHealthRecord_FullMethodName = "/proto.livestock.v1.HealthRecordService/DeleteHealthRecord"
)

// HealthRecordServiceClient is the client API for HealthRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthRecordServiceClient interface {
	CreateHealthRecord(ctx context.Context, in *CreateHealthRecordRequest, opts ...grpc.CallOption) (*CreateHealthRecordResponse, error)
	GetHealthRecord(ctx context.Context, in *GetHealthRecordRequest, opts ...grpc.CallOption) (*GetHealthRecordResponse, error)
	UpdateHealthRecord(ctx context.Context, in *UpdateHealthRecordRequest, opts ...grpc.CallOption) (*UpdateHealthRecordResponse, error)
	DeleteHealthRecord(ctx context.Context, in *DeleteHealthRecordRequest, opts ...grpc.CallOption) (*DeleteHealthRecordResponse, error)
}

type healthRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthRecordServiceClient(cc grpc.ClientConnInterface) HealthRecordServiceClient {
	return &healthRecordServiceClient{cc}
}

func (c *healthRecordServiceClient) CreateHealthRecord(ctx context.Context, in *CreateHealthRecordRequest, opts ...grpc.CallOption) (*CreateHealthRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHealthRecordResponse)
	err := c.cc.Invoke(ctx, HealthRecordService_CreateHealthRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecordServiceClient) GetHealthRecord(ctx context.Context, in *GetHealthRecordRequest, opts ...grpc.CallOption) (*GetHealthRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHealthRecordResponse)
	err := c.cc.Invoke(ctx, HealthRecordService_GetHealthRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecordServiceClient) UpdateHealthRecord(ctx context.Context, in *UpdateHealthRecordRequest, opts ...grpc.CallOption) (*UpdateHealthRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHealthRecordResponse)
	err := c.cc.Invoke(ctx, HealthRecordService_UpdateHealthRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecordServiceClient) DeleteHealthRecord(ctx context.Context, in *DeleteHealthRecordRequest, opts ...grpc.CallOption) (*DeleteHealthRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHealthRecordResponse)
	err := c.cc.Invoke(ctx, HealthRecordService_DeleteHealthRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthRecordServiceServer is the server API for HealthRecordService service.
// All implementations must embed UnimplementedHealthRecordServiceServer
// for forward compatibility.
type HealthRecordServiceServer interface {
	CreateHealthRecord(context.Context, *CreateHealthRecordRequest) (*CreateHealthRecordResponse, error)
	GetHealthRecord(context.Context, *GetHealthRecordRequest) (*GetHealthRecordResponse, error)
	UpdateHealthRecord(context.Context, *UpdateHealthRecordRequest) (*UpdateHealthRecordResponse, error)
	DeleteHealthRecord(context.Context, *DeleteHealthRecordRequest) (*DeleteHealthRecordResponse, error)
	mustEmbedUnimplementedHealthRecordServiceServer()
}

// UnimplementedHealthRecordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthRecordServiceServer struct{}

func (UnimplementedHealthRecordServiceServer) CreateHealthRecord(context.Context, *CreateHealthRecordRequest) (*CreateHealthRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHealthRecord not implemented")
}
func (UnimplementedHealthRecordServiceServer) GetHealthRecord(context.Context, *GetHealthRecordRequest) (*GetHealthRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthRecord not implemented")
}
func (UnimplementedHealthRecordServiceServer) UpdateHealthRecord(context.Context, *UpdateHealthRecordRequest) (*UpdateHealthRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHealthRecord not implemented")
}
func (UnimplementedHealthRecordServiceServer) DeleteHealthRecord(context.Context, *DeleteHealthRecordRequest) (*DeleteHealthRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHealthRecord not implemented")
}
func (UnimplementedHealthRecordServiceServer) mustEmbedUnimplementedHealthRecordServiceServer() {}
func (UnimplementedHealthRecordServiceServer) testEmbeddedByValue()                             {}

// UnsafeHealthRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthRecordServiceServer will
// result in compilation errors.
type UnsafeHealthRecordServiceServer interface {
	mustEmbedUnimplementedHealthRecordServiceServer()
}

func RegisterHealthRecordServiceServer(s grpc.ServiceRegistrar, srv HealthRecordServiceServer) {
	// If the following call pancis, it indicates UnimplementedHealthRecordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthRecordService_ServiceDesc, srv)
}

func _HealthRecordService_CreateHealthRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHealthRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecordServiceServer).CreateHealthRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecordService_CreateHealthRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecordServiceServer).CreateHealthRecord(ctx, req.(*CreateHealthRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecordService_GetHealthRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecordServiceServer).GetHealthRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecordService_GetHealthRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecordServiceServer).GetHealthRecord(ctx, req.(*GetHealthRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecordService_UpdateHealthRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHealthRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecordServiceServer).UpdateHealthRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecordService_UpdateHealthRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecordServiceServer).UpdateHealthRecord(ctx, req.(*UpdateHealthRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecordService_DeleteHealthRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHealthRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecordServiceServer).DeleteHealthRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecordService_DeleteHealthRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecordServiceServer).DeleteHealthRecord(ctx, req.(*DeleteHealthRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthRecordService_ServiceDesc is the grpc.ServiceDesc for HealthRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.livestock.v1.HealthRecordService",
	HandlerType: (*HealthRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHealthRecord",
			Handler:    _HealthRecordService_CreateHealthRecord_Handler,
		},
		{
			MethodName: "GetHealthRecord",
			Handler:    _HealthRecordService_GetHealthRecord_Handler,
		},
		{
			MethodName: "UpdateHealthRecord",
			Handler:    _HealthRecordService_UpdateHealthRecord_Handler,
		},
		{
			MethodName: "DeleteHealthRecord",
			Handler:    _HealthRecordService_DeleteHealthRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/livestock/v1/health_record.proto",
}
