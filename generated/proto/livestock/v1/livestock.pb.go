// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: proto/livestock/v1/livestock.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LivestockType int32

const (
	LivestockType_LIVESTOCK_TYPE_UNSPECIFIED LivestockType = 0
	LivestockType_LIVESTOCK_TYPE_COW         LivestockType = 1
	LivestockType_LIVESTOCK_TYPE_BULL        LivestockType = 2
	LivestockType_LIVESTOCK_TYPE_CALF        LivestockType = 3
)

// Enum value maps for LivestockType.
var (
	LivestockType_name = map[int32]string{
		0: "LIVESTOCK_TYPE_UNSPECIFIED",
		1: "LIVESTOCK_TYPE_COW",
		2: "LIVESTOCK_TYPE_BULL",
		3: "LIVESTOCK_TYPE_CALF",
	}
	LivestockType_value = map[string]int32{
		"LIVESTOCK_TYPE_UNSPECIFIED": 0,
		"LIVESTOCK_TYPE_COW":         1,
		"LIVESTOCK_TYPE_BULL":        2,
		"LIVESTOCK_TYPE_CALF":        3,
	}
)

func (x LivestockType) Enum() *LivestockType {
	p := new(LivestockType)
	*p = x
	return p
}

func (x LivestockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LivestockType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_livestock_v1_livestock_proto_enumTypes[0].Descriptor()
}

func (LivestockType) Type() protoreflect.EnumType {
	return &file_proto_livestock_v1_livestock_proto_enumTypes[0]
}

func (x LivestockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LivestockType.Descriptor instead.
func (LivestockType) EnumDescriptor() ([]byte, []int) {
	return file_proto_livestock_v1_livestock_proto_rawDescGZIP(), []int{0}
}

type LivestockSex int32

const (
	LivestockSex_LIVESTOCK_SEX_UNSPECIFIED LivestockSex = 0
	LivestockSex_LIVESTOCK_SEX_MALE        LivestockSex = 1
	LivestockSex_LIVESTOCK_SEX_FEMALE      LivestockSex = 2
)

// Enum value maps for LivestockSex.
var (
	LivestockSex_name = map[int32]string{
		0: "LIVESTOCK_SEX_UNSPECIFIED",
		1: "LIVESTOCK_SEX_MALE",
		2: "LIVESTOCK_SEX_FEMALE",
	}
	LivestockSex_value = map[string]int32{
		"LIVESTOCK_SEX_UNSPECIFIED": 0,
		"LIVESTOCK_SEX_MALE":        1,
		"LIVESTOCK_SEX_FEMALE":      2,
	}
)

func (x LivestockSex) Enum() *LivestockSex {
	p := new(LivestockSex)
	*p = x
	return p
}

func (x LivestockSex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LivestockSex) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_livestock_v1_livestock_proto_enumTypes[1].Descriptor()
}

func (LivestockSex) Type() protoreflect.EnumType {
	return &file_proto_livestock_v1_livestock_proto_enumTypes[1]
}

func (x LivestockSex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LivestockSex.Descriptor instead.
func (LivestockSex) EnumDescriptor() ([]byte, []int) {
	return file_proto_livestock_v1_livestock_proto_rawDescGZIP(), []int{1}
}

type LivestockStatus int32

const (
	LivestockStatus_LIVESTOCK_STATUS_UNSPECIFIED LivestockStatus = 0
	LivestockStatus_LIVESTOCK_STATUS_ACTIVE      LivestockStatus = 1
	LivestockStatus_LIVESTOCK_STATUS_SOLD        LivestockStatus = 2
	LivestockStatus_LIVESTOCK_STATUS_DECEASED    LivestockStatus = 3
	LivestockStatus_LIVESTOCK_STATUS_RETIRED     LivestockStatus = 4
)

// Enum value maps for LivestockStatus.
var (
	LivestockStatus_name = map[int32]string{
		0: "LIVESTOCK_STATUS_UNSPECIFIED",
		1: "LIVESTOCK_STATUS_ACTIVE",
		2: "LIVESTOCK_STATUS_SOLD",
		3: "LIVESTOCK_STATUS_DECEASED",
		4: "LIVESTOCK_STATUS_RETIRED",
	}
	LivestockStatus_value = map[string]int32{
		"LIVESTOCK_STATUS_UNSPECIFIED": 0,
		"LIVESTOCK_STATUS_ACTIVE":      1,
		"LIVESTOCK_STATUS_SOLD":        2,
		"LIVESTOCK_STATUS_DECEASED":    3,
		"LIVESTOCK_STATUS_RETIRED":     4,
	}
)

func (x LivestockStatus) Enum() *LivestockStatus {
	p := new(LivestockStatus)
	*p = x
	return p
}

func (x LivestockStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LivestockStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_livestock_v1_livestock_proto_enumTypes[2].Descriptor()
}

func (LivestockStatus) Type() protoreflect.EnumType {
	return &file_proto_livestock_v1_livestock_proto_enumTypes[2]
}

func (x LivestockStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LivestockStatus.Descriptor instead.
func (LivestockStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_livestock_v1_livestock_proto_rawDescGZIP(), []int{2}
}

type Livestock struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FarmId             string                 `protobuf:"bytes,2,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`
	Type               LivestockType          `protobuf:"varint,3,opt,name=type,proto3,enum=v1.LivestockType" json:"type,omitempty"`
	Breed              string                 `protobuf:"bytes,4,opt,name=breed,proto3" json:"breed,omitempty"`
	BirthDate          string                 `protobuf:"bytes,5,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	Location           string                 `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Sex                LivestockSex           `protobuf:"varint,7,opt,name=sex,proto3,enum=v1.LivestockSex" json:"sex,omitempty"`
	Status             LivestockStatus        `protobuf:"varint,8,opt,name=status,proto3,enum=v1.LivestockStatus" json:"status,omitempty"`
	TagId              string                 `protobuf:"bytes,9,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	SireId             string                 `protobuf:"bytes,10,opt,name=sire_id,json=sireId,proto3" json:"sire_id,omitempty"`
	DamId              string                 `protobuf:"bytes,11,opt,name=dam_id,json=damId,proto3" json:"dam_id,omitempty"`
	VaccinationRecords []*VaccinationRecord   `protobuf:"bytes,12,rep,name=vaccination_records,json=vaccinationRecords,proto3" json:"vaccination_records,omitempty"`
	HealthRecords      []*HealthRecord        `protobuf:"bytes,13,rep,name=health_records,json=healthRecords,proto3" json:"health_records,omitempty"`
	WeightRecords      []*WeightRecord        `protobuf:"bytes,14,rep,name=weight_records,json=weightRecords,proto3" json:"weight_records,omitempty"`
	TemperatureRecords []*TemperatureRecord   `protobuf:"bytes,15,rep,name=temperature_records,json=temperatureRecords,proto3" json:"temperature_records,omitempty"`
	BreedingRecords    []*BreedingRecord      `protobuf:"bytes,16,rep,name=breeding_records,json=breedingRecords,proto3" json:"breeding_records,omitempty"`
	CreatedAt          string                 `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          string                 `protobuf:"bytes,18,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Livestock) Reset() {
	*x = Livestock{}
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Livestock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Livestock) ProtoMessage() {}

func (x *Livestock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Livestock.ProtoReflect.Descriptor instead.
func (*Livestock) Descriptor() ([]byte, []int) {
	return file_proto_livestock_v1_livestock_proto_rawDescGZIP(), []int{0}
}

func (x *Livestock) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Livestock) GetFarmId() string {
	if x != nil {
		return x.FarmId
	}
	return ""
}

func (x *Livestock) GetType() LivestockType {
	if x != nil {
		return x.Type
	}
	return LivestockType_LIVESTOCK_TYPE_UNSPECIFIED
}

func (x *Livestock) GetBreed() string {
	if x != nil {
		return x.Breed
	}
	return ""
}

func (x *Livestock) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *Livestock) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Livestock) GetSex() LivestockSex {
	if x != nil {
		return x.Sex
	}
	return LivestockSex_LIVESTOCK_SEX_UNSPECIFIED
}

func (x *Livestock) GetStatus() LivestockStatus {
	if x != nil {
		return x.Status
	}
	return LivestockStatus_LIVESTOCK_STATUS_UNSPECIFIED
}

func (x *Livestock) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *Livestock) GetSireId() string {
	if x != nil {
		return x.SireId
	}
	return ""
}

func (x *Livestock) GetDamId() string {
	if x != nil {
		return x.DamId
	}
	return ""
}

func (x *Livestock) GetVaccinationRecords() []*VaccinationRecord {
	if x != nil {
		return x.VaccinationRecords
	}
	return nil
}

func (x *Livestock) GetHealthRecords() []*HealthRecord {
	if x != nil {
		return x.HealthRecords
	}
	return nil
}

func (x *Livestock) GetWeightRecords() []*WeightRecord {
	if x != nil {
		return x.WeightRecords
	}
	return nil
}

func (x *Livestock) GetTemperatureRecords() []*TemperatureRecord {
	if x != nil {
		return x.TemperatureRecords
	}
	return nil
}

func (x *Livestock) GetBreedingRecords() []*BreedingRecord {
	if x != nil {
		return x.BreedingRecords
	}
	return nil
}

func (x *Livestock) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Livestock) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type CreateLivestockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FarmId        string                 `protobuf:"bytes,1,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`
	Type          LivestockType          `protobuf:"varint,2,opt,name=type,proto3,enum=v1.LivestockType" json:"type,omitempty"`
	Breed         string                 `protobuf:"bytes,3,opt,name=breed,proto3" json:"breed,omitempty"`
	BirthDate     string                 `protobuf:"bytes,4,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	Location      string                 `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Sex           LivestockSex           `protobuf:"varint,6,opt,name=sex,proto3,enum=v1.LivestockSex" json:"sex,omitempty"`
	Status        LivestockStatus        `protobuf:"varint,7,opt,name=status,proto3,enum=v1.LivestockStatus" json:"status,omitempty"`
	TagId         string                 `protobuf:"bytes,8,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	SireId        string                 `protobuf:"bytes,9,opt,name=sire_id,json=sireId,proto3" json:"sire_id,omitempty"`
	DamId         string                 `protobuf:"bytes,10,opt,name=dam_id,json=damId,proto3" json:"dam_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLivestockRequest) Reset() {
	*x = CreateLivestockRequest{}
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLivestockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLivestockRequest) ProtoMessage() {}

func (x *CreateLivestockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLivestockRequest.ProtoReflect.Descriptor instead.
func (*CreateLivestockRequest) Descriptor() ([]byte, []int) {
	return file_proto_livestock_v1_livestock_proto_rawDescGZIP(), []int{1}
}

func (x *CreateLivestockRequest) GetFarmId() string {
	if x != nil {
		return x.FarmId
	}
	return ""
}

func (x *CreateLivestockRequest) GetType() LivestockType {
	if x != nil {
		return x.Type
	}
	return LivestockType_LIVESTOCK_TYPE_UNSPECIFIED
}

func (x *CreateLivestockRequest) GetBreed() string {
	if x != nil {
		return x.Breed
	}
	return ""
}

func (x *CreateLivestockRequest) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *CreateLivestockRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateLivestockRequest) GetSex() LivestockSex {
	if x != nil {
		return x.Sex
	}
	return LivestockSex_LIVESTOCK_SEX_UNSPECIFIED
}

func (x *CreateLivestockRequest) GetStatus() LivestockStatus {
	if x != nil {
		return x.Status
	}
	return LivestockStatus_LIVESTOCK_STATUS_UNSPECIFIED
}

func (x *CreateLivestockRequest) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *CreateLivestockRequest) GetSireId() string {
	if x != nil {
		return x.SireId
	}
	return ""
}

func (x *CreateLivestockRequest) GetDamId() string {
	if x != nil {
		return x.DamId
	}
	return ""
}

type CreateLivestockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Livestock     *Livestock             `protobuf:"bytes,1,opt,name=livestock,proto3" json:"livestock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLivestockResponse) Reset() {
	*x = CreateLivestockResponse{}
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLivestockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLivestockResponse) ProtoMessage() {}

func (x *CreateLivestockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLivestockResponse.ProtoReflect.Descriptor instead.
func (*CreateLivestockResponse) Descriptor() ([]byte, []int) {
	return file_proto_livestock_v1_livestock_proto_rawDescGZIP(), []int{2}
}

func (x *CreateLivestockResponse) GetLivestock() *Livestock {
	if x != nil {
		return x.Livestock
	}
	return nil
}

type GetLivestockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLivestockRequest) Reset() {
	*x = GetLivestockRequest{}
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLivestockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLivestockRequest) ProtoMessage() {}

func (x *GetLivestockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLivestockRequest.ProtoReflect.Descriptor instead.
func (*GetLivestockRequest) Descriptor() ([]byte, []int) {
	return file_proto_livestock_v1_livestock_proto_rawDescGZIP(), []int{3}
}

func (x *GetLivestockRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetLivestockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Livestock     *Livestock             `protobuf:"bytes,1,opt,name=livestock,proto3" json:"livestock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLivestockResponse) Reset() {
	*x = GetLivestockResponse{}
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLivestockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLivestockResponse) ProtoMessage() {}

func (x *GetLivestockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLivestockResponse.ProtoReflect.Descriptor instead.
func (*GetLivestockResponse) Descriptor() ([]byte, []int) {
	return file_proto_livestock_v1_livestock_proto_rawDescGZIP(), []int{4}
}

func (x *GetLivestockResponse) GetLivestock() *Livestock {
	if x != nil {
		return x.Livestock
	}
	return nil
}

type GetLivestockByFarmIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FarmId        string                 `protobuf:"bytes,1,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLivestockByFarmIdRequest) Reset() {
	*x = GetLivestockByFarmIdRequest{}
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLivestockByFarmIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLivestockByFarmIdRequest) ProtoMessage() {}

func (x *GetLivestockByFarmIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLivestockByFarmIdRequest.ProtoReflect.Descriptor instead.
func (*GetLivestockByFarmIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_livestock_v1_livestock_proto_rawDescGZIP(), []int{5}
}

func (x *GetLivestockByFarmIdRequest) GetFarmId() string {
	if x != nil {
		return x.FarmId
	}
	return ""
}

type GetLivestockByFarmIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Livestock     []*Livestock           `protobuf:"bytes,1,rep,name=livestock,proto3" json:"livestock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLivestockByFarmIdResponse) Reset() {
	*x = GetLivestockByFarmIdResponse{}
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLivestockByFarmIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLivestockByFarmIdResponse) ProtoMessage() {}

func (x *GetLivestockByFarmIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLivestockByFarmIdResponse.ProtoReflect.Descriptor instead.
func (*GetLivestockByFarmIdResponse) Descriptor() ([]byte, []int) {
	return file_proto_livestock_v1_livestock_proto_rawDescGZIP(), []int{6}
}

func (x *GetLivestockByFarmIdResponse) GetLivestock() []*Livestock {
	if x != nil {
		return x.Livestock
	}
	return nil
}

type UpdateLivestockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FarmId        string                 `protobuf:"bytes,2,opt,name=farm_id,json=farmId,proto3" json:"farm_id,omitempty"`
	Type          LivestockType          `protobuf:"varint,3,opt,name=type,proto3,enum=v1.LivestockType" json:"type,omitempty"`
	Breed         string                 `protobuf:"bytes,4,opt,name=breed,proto3" json:"breed,omitempty"`
	BirthDate     string                 `protobuf:"bytes,5,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	Location      string                 `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Sex           LivestockSex           `protobuf:"varint,7,opt,name=sex,proto3,enum=v1.LivestockSex" json:"sex,omitempty"`
	Status        LivestockStatus        `protobuf:"varint,8,opt,name=status,proto3,enum=v1.LivestockStatus" json:"status,omitempty"`
	TagId         string                 `protobuf:"bytes,9,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	SireId        string                 `protobuf:"bytes,10,opt,name=sire_id,json=sireId,proto3" json:"sire_id,omitempty"`
	DamId         string                 `protobuf:"bytes,11,opt,name=dam_id,json=damId,proto3" json:"dam_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLivestockRequest) Reset() {
	*x = UpdateLivestockRequest{}
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLivestockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLivestockRequest) ProtoMessage() {}

func (x *UpdateLivestockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLivestockRequest.ProtoReflect.Descriptor instead.
func (*UpdateLivestockRequest) Descriptor() ([]byte, []int) {
	return file_proto_livestock_v1_livestock_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateLivestockRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateLivestockRequest) GetFarmId() string {
	if x != nil {
		return x.FarmId
	}
	return ""
}

func (x *UpdateLivestockRequest) GetType() LivestockType {
	if x != nil {
		return x.Type
	}
	return LivestockType_LIVESTOCK_TYPE_UNSPECIFIED
}

func (x *UpdateLivestockRequest) GetBreed() string {
	if x != nil {
		return x.Breed
	}
	return ""
}

func (x *UpdateLivestockRequest) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *UpdateLivestockRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UpdateLivestockRequest) GetSex() LivestockSex {
	if x != nil {
		return x.Sex
	}
	return LivestockSex_LIVESTOCK_SEX_UNSPECIFIED
}

func (x *UpdateLivestockRequest) GetStatus() LivestockStatus {
	if x != nil {
		return x.Status
	}
	return LivestockStatus_LIVESTOCK_STATUS_UNSPECIFIED
}

func (x *UpdateLivestockRequest) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *UpdateLivestockRequest) GetSireId() string {
	if x != nil {
		return x.SireId
	}
	return ""
}

func (x *UpdateLivestockRequest) GetDamId() string {
	if x != nil {
		return x.DamId
	}
	return ""
}

type UpdateLivestockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Livestock     *Livestock             `protobuf:"bytes,1,opt,name=livestock,proto3" json:"livestock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLivestockResponse) Reset() {
	*x = UpdateLivestockResponse{}
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLivestockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLivestockResponse) ProtoMessage() {}

func (x *UpdateLivestockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLivestockResponse.ProtoReflect.Descriptor instead.
func (*UpdateLivestockResponse) Descriptor() ([]byte, []int) {
	return file_proto_livestock_v1_livestock_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateLivestockResponse) GetLivestock() *Livestock {
	if x != nil {
		return x.Livestock
	}
	return nil
}

type DeleteLivestockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteLivestockRequest) Reset() {
	*x = DeleteLivestockRequest{}
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLivestockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLivestockRequest) ProtoMessage() {}

func (x *DeleteLivestockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLivestockRequest.ProtoReflect.Descriptor instead.
func (*DeleteLivestockRequest) Descriptor() ([]byte, []int) {
	return file_proto_livestock_v1_livestock_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteLivestockRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteLivestockResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteLivestockResponse) Reset() {
	*x = DeleteLivestockResponse{}
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLivestockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLivestockResponse) ProtoMessage() {}

func (x *DeleteLivestockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livestock_v1_livestock_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLivestockResponse.ProtoReflect.Descriptor instead.
func (*DeleteLivestockResponse) Descriptor() ([]byte, []int) {
	return file_proto_livestock_v1_livestock_proto_rawDescGZIP(), []int{10}
}

var File_proto_livestock_v1_livestock_proto protoreflect.FileDescriptor

var file_proto_livestock_v1_livestock_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x63,
	0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x76,
	0x31, 0x2f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x05, 0x0a,
	0x09, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72,
	0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x65, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x78, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x64, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x13, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x12, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x46, 0x0a,
	0x13, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x10, 0x62, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x0f, 0x62, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xc1, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x72, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72,
	0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x78, 0x52, 0x03, 0x73,
	0x65, 0x78, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x25,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x09, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x36, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x46, 0x61, 0x72, 0x6d,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x72, 0x6d,
	0x49, 0x64, 0x22, 0x4b, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x42, 0x79, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22,
	0xd1, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72,
	0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x65, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x78, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x64, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61,
	0x6d, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x28, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2a, 0x79, 0x0a, 0x0d, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x56,
	0x45, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x4c, 0x4c,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x46, 0x10, 0x03, 0x2a, 0x5f, 0x0a, 0x0c, 0x4c,
	0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x19, 0x4c,
	0x49, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x58, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49,
	0x56, 0x45, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x58, 0x5f, 0x4d, 0x41, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x53, 0x45, 0x58, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0xa8, 0x01, 0x0a,
	0x0f, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x49, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x49, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x4c, 0x49, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x49,
	0x56, 0x45, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x45, 0x43, 0x45, 0x41, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x56,
	0x45, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x54, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x32, 0x94, 0x03, 0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x46, 0x61, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3b,
	0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x72,
	0x69, 0x76, 0x61, 0x6e, 0x6e, 0x61, 0x2f, 0x61, 0x67, 0x72, 0x69, 0x76, 0x61, 0x6e, 0x6e, 0x61,
	0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_livestock_v1_livestock_proto_rawDescOnce sync.Once
	file_proto_livestock_v1_livestock_proto_rawDescData = file_proto_livestock_v1_livestock_proto_rawDesc
)

func file_proto_livestock_v1_livestock_proto_rawDescGZIP() []byte {
	file_proto_livestock_v1_livestock_proto_rawDescOnce.Do(func() {
		file_proto_livestock_v1_livestock_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_livestock_v1_livestock_proto_rawDescData)
	})
	return file_proto_livestock_v1_livestock_proto_rawDescData
}

var file_proto_livestock_v1_livestock_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_livestock_v1_livestock_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_livestock_v1_livestock_proto_goTypes = []any{
	(LivestockType)(0),                   // 0: v1.LivestockType
	(LivestockSex)(0),                    // 1: v1.LivestockSex
	(LivestockStatus)(0),                 // 2: v1.LivestockStatus
	(*Livestock)(nil),                    // 3: v1.Livestock
	(*CreateLivestockRequest)(nil),       // 4: v1.CreateLivestockRequest
	(*CreateLivestockResponse)(nil),      // 5: v1.CreateLivestockResponse
	(*GetLivestockRequest)(nil),          // 6: v1.GetLivestockRequest
	(*GetLivestockResponse)(nil),         // 7: v1.GetLivestockResponse
	(*GetLivestockByFarmIdRequest)(nil),  // 8: v1.GetLivestockByFarmIdRequest
	(*GetLivestockByFarmIdResponse)(nil), // 9: v1.GetLivestockByFarmIdResponse
	(*UpdateLivestockRequest)(nil),       // 10: v1.UpdateLivestockRequest
	(*UpdateLivestockResponse)(nil),      // 11: v1.UpdateLivestockResponse
	(*DeleteLivestockRequest)(nil),       // 12: v1.DeleteLivestockRequest
	(*DeleteLivestockResponse)(nil),      // 13: v1.DeleteLivestockResponse
	(*VaccinationRecord)(nil),            // 14: v1.VaccinationRecord
	(*HealthRecord)(nil),                 // 15: v1.HealthRecord
	(*WeightRecord)(nil),                 // 16: v1.WeightRecord
	(*TemperatureRecord)(nil),            // 17: v1.TemperatureRecord
	(*BreedingRecord)(nil),               // 18: v1.BreedingRecord
}
var file_proto_livestock_v1_livestock_proto_depIdxs = []int32{
	0,  // 0: v1.Livestock.type:type_name -> v1.LivestockType
	1,  // 1: v1.Livestock.sex:type_name -> v1.LivestockSex
	2,  // 2: v1.Livestock.status:type_name -> v1.LivestockStatus
	14, // 3: v1.Livestock.vaccination_records:type_name -> v1.VaccinationRecord
	15, // 4: v1.Livestock.health_records:type_name -> v1.HealthRecord
	16, // 5: v1.Livestock.weight_records:type_name -> v1.WeightRecord
	17, // 6: v1.Livestock.temperature_records:type_name -> v1.TemperatureRecord
	18, // 7: v1.Livestock.breeding_records:type_name -> v1.BreedingRecord
	0,  // 8: v1.CreateLivestockRequest.type:type_name -> v1.LivestockType
	1,  // 9: v1.CreateLivestockRequest.sex:type_name -> v1.LivestockSex
	2,  // 10: v1.CreateLivestockRequest.status:type_name -> v1.LivestockStatus
	3,  // 11: v1.CreateLivestockResponse.livestock:type_name -> v1.Livestock
	3,  // 12: v1.GetLivestockResponse.livestock:type_name -> v1.Livestock
	3,  // 13: v1.GetLivestockByFarmIdResponse.livestock:type_name -> v1.Livestock
	0,  // 14: v1.UpdateLivestockRequest.type:type_name -> v1.LivestockType
	1,  // 15: v1.UpdateLivestockRequest.sex:type_name -> v1.LivestockSex
	2,  // 16: v1.UpdateLivestockRequest.status:type_name -> v1.LivestockStatus
	3,  // 17: v1.UpdateLivestockResponse.livestock:type_name -> v1.Livestock
	4,  // 18: v1.LivestockService.CreateLivestock:input_type -> v1.CreateLivestockRequest
	6,  // 19: v1.LivestockService.GetLivestock:input_type -> v1.GetLivestockRequest
	8,  // 20: v1.LivestockService.GetLivestockByFarmId:input_type -> v1.GetLivestockByFarmIdRequest
	10, // 21: v1.LivestockService.UpdateLivestock:input_type -> v1.UpdateLivestockRequest
	12, // 22: v1.LivestockService.DeleteLivestock:input_type -> v1.DeleteLivestockRequest
	5,  // 23: v1.LivestockService.CreateLivestock:output_type -> v1.CreateLivestockResponse
	7,  // 24: v1.LivestockService.GetLivestock:output_type -> v1.GetLivestockResponse
	9,  // 25: v1.LivestockService.GetLivestockByFarmId:output_type -> v1.GetLivestockByFarmIdResponse
	11, // 26: v1.LivestockService.UpdateLivestock:output_type -> v1.UpdateLivestockResponse
	13, // 27: v1.LivestockService.DeleteLivestock:output_type -> v1.DeleteLivestockResponse
	23, // [23:28] is the sub-list for method output_type
	18, // [18:23] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_livestock_v1_livestock_proto_init() }
func file_proto_livestock_v1_livestock_proto_init() {
	if File_proto_livestock_v1_livestock_proto != nil {
		return
	}
	file_proto_livestock_v1_vaccination_record_proto_init()
	file_proto_livestock_v1_health_record_proto_init()
	file_proto_livestock_v1_weight_record_proto_init()
	file_proto_livestock_v1_temperature_record_proto_init()
	file_proto_livestock_v1_breeding_record_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_livestock_v1_livestock_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_livestock_v1_livestock_proto_goTypes,
		DependencyIndexes: file_proto_livestock_v1_livestock_proto_depIdxs,
		EnumInfos:         file_proto_livestock_v1_livestock_proto_enumTypes,
		MessageInfos:      file_proto_livestock_v1_livestock_proto_msgTypes,
	}.Build()
	File_proto_livestock_v1_livestock_proto = out.File
	file_proto_livestock_v1_livestock_proto_rawDesc = nil
	file_proto_livestock_v1_livestock_proto_goTypes = nil
	file_proto_livestock_v1_livestock_proto_depIdxs = nil
}
