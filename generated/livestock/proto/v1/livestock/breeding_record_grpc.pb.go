// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/v1/livestock/breeding_record.proto

package livestock

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BreedingRecordService_CreateBreedingRecord_FullMethodName = "/proto.v1.livestock.BreedingRecordService/CreateBreedingRecord"
	BreedingRecordService_GetBreedingRecord_FullMethodName    = "/proto.v1.livestock.BreedingRecordService/GetBreedingRecord"
	BreedingRecordService_UpdateBreedingRecord_FullMethodName = "/proto.v1.livestock.BreedingRecordService/UpdateBreedingRecord"
	BreedingRecordService_DeleteBreedingRecord_FullMethodName = "/proto.v1.livestock.BreedingRecordService/DeleteBreedingRecord"
)

// BreedingRecordServiceClient is the client API for BreedingRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BreedingRecordServiceClient interface {
	CreateBreedingRecord(ctx context.Context, in *CreateBreedingRecordRequest, opts ...grpc.CallOption) (*CreateBreedingRecordResponse, error)
	GetBreedingRecord(ctx context.Context, in *GetBreedingRecordRequest, opts ...grpc.CallOption) (*GetBreedingRecordResponse, error)
	UpdateBreedingRecord(ctx context.Context, in *UpdateBreedingRecordRequest, opts ...grpc.CallOption) (*UpdateBreedingRecordResponse, error)
	DeleteBreedingRecord(ctx context.Context, in *DeleteBreedingRecordRequest, opts ...grpc.CallOption) (*DeleteBreedingRecordResponse, error)
}

type breedingRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBreedingRecordServiceClient(cc grpc.ClientConnInterface) BreedingRecordServiceClient {
	return &breedingRecordServiceClient{cc}
}

func (c *breedingRecordServiceClient) CreateBreedingRecord(ctx context.Context, in *CreateBreedingRecordRequest, opts ...grpc.CallOption) (*CreateBreedingRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBreedingRecordResponse)
	err := c.cc.Invoke(ctx, BreedingRecordService_CreateBreedingRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *breedingRecordServiceClient) GetBreedingRecord(ctx context.Context, in *GetBreedingRecordRequest, opts ...grpc.CallOption) (*GetBreedingRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBreedingRecordResponse)
	err := c.cc.Invoke(ctx, BreedingRecordService_GetBreedingRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *breedingRecordServiceClient) UpdateBreedingRecord(ctx context.Context, in *UpdateBreedingRecordRequest, opts ...grpc.CallOption) (*UpdateBreedingRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBreedingRecordResponse)
	err := c.cc.Invoke(ctx, BreedingRecordService_UpdateBreedingRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *breedingRecordServiceClient) DeleteBreedingRecord(ctx context.Context, in *DeleteBreedingRecordRequest, opts ...grpc.CallOption) (*DeleteBreedingRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBreedingRecordResponse)
	err := c.cc.Invoke(ctx, BreedingRecordService_DeleteBreedingRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BreedingRecordServiceServer is the server API for BreedingRecordService service.
// All implementations must embed UnimplementedBreedingRecordServiceServer
// for forward compatibility.
type BreedingRecordServiceServer interface {
	CreateBreedingRecord(context.Context, *CreateBreedingRecordRequest) (*CreateBreedingRecordResponse, error)
	GetBreedingRecord(context.Context, *GetBreedingRecordRequest) (*GetBreedingRecordResponse, error)
	UpdateBreedingRecord(context.Context, *UpdateBreedingRecordRequest) (*UpdateBreedingRecordResponse, error)
	DeleteBreedingRecord(context.Context, *DeleteBreedingRecordRequest) (*DeleteBreedingRecordResponse, error)
	mustEmbedUnimplementedBreedingRecordServiceServer()
}

// UnimplementedBreedingRecordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBreedingRecordServiceServer struct{}

func (UnimplementedBreedingRecordServiceServer) CreateBreedingRecord(context.Context, *CreateBreedingRecordRequest) (*CreateBreedingRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBreedingRecord not implemented")
}
func (UnimplementedBreedingRecordServiceServer) GetBreedingRecord(context.Context, *GetBreedingRecordRequest) (*GetBreedingRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBreedingRecord not implemented")
}
func (UnimplementedBreedingRecordServiceServer) UpdateBreedingRecord(context.Context, *UpdateBreedingRecordRequest) (*UpdateBreedingRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBreedingRecord not implemented")
}
func (UnimplementedBreedingRecordServiceServer) DeleteBreedingRecord(context.Context, *DeleteBreedingRecordRequest) (*DeleteBreedingRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBreedingRecord not implemented")
}
func (UnimplementedBreedingRecordServiceServer) mustEmbedUnimplementedBreedingRecordServiceServer() {}
func (UnimplementedBreedingRecordServiceServer) testEmbeddedByValue()                               {}

// UnsafeBreedingRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BreedingRecordServiceServer will
// result in compilation errors.
type UnsafeBreedingRecordServiceServer interface {
	mustEmbedUnimplementedBreedingRecordServiceServer()
}

func RegisterBreedingRecordServiceServer(s grpc.ServiceRegistrar, srv BreedingRecordServiceServer) {
	// If the following call pancis, it indicates UnimplementedBreedingRecordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BreedingRecordService_ServiceDesc, srv)
}

func _BreedingRecordService_CreateBreedingRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBreedingRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BreedingRecordServiceServer).CreateBreedingRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BreedingRecordService_CreateBreedingRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BreedingRecordServiceServer).CreateBreedingRecord(ctx, req.(*CreateBreedingRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BreedingRecordService_GetBreedingRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBreedingRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BreedingRecordServiceServer).GetBreedingRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BreedingRecordService_GetBreedingRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BreedingRecordServiceServer).GetBreedingRecord(ctx, req.(*GetBreedingRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BreedingRecordService_UpdateBreedingRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBreedingRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BreedingRecordServiceServer).UpdateBreedingRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BreedingRecordService_UpdateBreedingRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BreedingRecordServiceServer).UpdateBreedingRecord(ctx, req.(*UpdateBreedingRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BreedingRecordService_DeleteBreedingRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBreedingRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BreedingRecordServiceServer).DeleteBreedingRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BreedingRecordService_DeleteBreedingRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BreedingRecordServiceServer).DeleteBreedingRecord(ctx, req.(*DeleteBreedingRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BreedingRecordService_ServiceDesc is the grpc.ServiceDesc for BreedingRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BreedingRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.livestock.BreedingRecordService",
	HandlerType: (*BreedingRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBreedingRecord",
			Handler:    _BreedingRecordService_CreateBreedingRecord_Handler,
		},
		{
			MethodName: "GetBreedingRecord",
			Handler:    _BreedingRecordService_GetBreedingRecord_Handler,
		},
		{
			MethodName: "UpdateBreedingRecord",
			Handler:    _BreedingRecordService_UpdateBreedingRecord_Handler,
		},
		{
			MethodName: "DeleteBreedingRecord",
			Handler:    _BreedingRecordService_DeleteBreedingRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/livestock/breeding_record.proto",
}
