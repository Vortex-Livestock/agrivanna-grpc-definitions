// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/v1/livestock/vaccination_record.proto

package livestock

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VaccinationRecordService_CreateVaccinationRecord_FullMethodName = "/proto.v1.livestock.VaccinationRecordService/CreateVaccinationRecord"
	VaccinationRecordService_GetVaccinationRecord_FullMethodName    = "/proto.v1.livestock.VaccinationRecordService/GetVaccinationRecord"
	VaccinationRecordService_UpdateVaccinationRecord_FullMethodName = "/proto.v1.livestock.VaccinationRecordService/UpdateVaccinationRecord"
	VaccinationRecordService_DeleteVaccinationRecord_FullMethodName = "/proto.v1.livestock.VaccinationRecordService/DeleteVaccinationRecord"
)

// VaccinationRecordServiceClient is the client API for VaccinationRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VaccinationRecordServiceClient interface {
	CreateVaccinationRecord(ctx context.Context, in *CreateVaccinationRecordRequest, opts ...grpc.CallOption) (*CreateVaccinationRecordResponse, error)
	GetVaccinationRecord(ctx context.Context, in *GetVaccinationRecordRequest, opts ...grpc.CallOption) (*GetVaccinationRecordResponse, error)
	UpdateVaccinationRecord(ctx context.Context, in *UpdateVaccinationRecordRequest, opts ...grpc.CallOption) (*UpdateVaccinationRecordResponse, error)
	DeleteVaccinationRecord(ctx context.Context, in *DeleteVaccinationRecordRequest, opts ...grpc.CallOption) (*DeleteVaccinationRecordResponse, error)
}

type vaccinationRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVaccinationRecordServiceClient(cc grpc.ClientConnInterface) VaccinationRecordServiceClient {
	return &vaccinationRecordServiceClient{cc}
}

func (c *vaccinationRecordServiceClient) CreateVaccinationRecord(ctx context.Context, in *CreateVaccinationRecordRequest, opts ...grpc.CallOption) (*CreateVaccinationRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVaccinationRecordResponse)
	err := c.cc.Invoke(ctx, VaccinationRecordService_CreateVaccinationRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaccinationRecordServiceClient) GetVaccinationRecord(ctx context.Context, in *GetVaccinationRecordRequest, opts ...grpc.CallOption) (*GetVaccinationRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVaccinationRecordResponse)
	err := c.cc.Invoke(ctx, VaccinationRecordService_GetVaccinationRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaccinationRecordServiceClient) UpdateVaccinationRecord(ctx context.Context, in *UpdateVaccinationRecordRequest, opts ...grpc.CallOption) (*UpdateVaccinationRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVaccinationRecordResponse)
	err := c.cc.Invoke(ctx, VaccinationRecordService_UpdateVaccinationRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaccinationRecordServiceClient) DeleteVaccinationRecord(ctx context.Context, in *DeleteVaccinationRecordRequest, opts ...grpc.CallOption) (*DeleteVaccinationRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVaccinationRecordResponse)
	err := c.cc.Invoke(ctx, VaccinationRecordService_DeleteVaccinationRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaccinationRecordServiceServer is the server API for VaccinationRecordService service.
// All implementations must embed UnimplementedVaccinationRecordServiceServer
// for forward compatibility.
type VaccinationRecordServiceServer interface {
	CreateVaccinationRecord(context.Context, *CreateVaccinationRecordRequest) (*CreateVaccinationRecordResponse, error)
	GetVaccinationRecord(context.Context, *GetVaccinationRecordRequest) (*GetVaccinationRecordResponse, error)
	UpdateVaccinationRecord(context.Context, *UpdateVaccinationRecordRequest) (*UpdateVaccinationRecordResponse, error)
	DeleteVaccinationRecord(context.Context, *DeleteVaccinationRecordRequest) (*DeleteVaccinationRecordResponse, error)
	mustEmbedUnimplementedVaccinationRecordServiceServer()
}

// UnimplementedVaccinationRecordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVaccinationRecordServiceServer struct{}

func (UnimplementedVaccinationRecordServiceServer) CreateVaccinationRecord(context.Context, *CreateVaccinationRecordRequest) (*CreateVaccinationRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVaccinationRecord not implemented")
}
func (UnimplementedVaccinationRecordServiceServer) GetVaccinationRecord(context.Context, *GetVaccinationRecordRequest) (*GetVaccinationRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVaccinationRecord not implemented")
}
func (UnimplementedVaccinationRecordServiceServer) UpdateVaccinationRecord(context.Context, *UpdateVaccinationRecordRequest) (*UpdateVaccinationRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVaccinationRecord not implemented")
}
func (UnimplementedVaccinationRecordServiceServer) DeleteVaccinationRecord(context.Context, *DeleteVaccinationRecordRequest) (*DeleteVaccinationRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVaccinationRecord not implemented")
}
func (UnimplementedVaccinationRecordServiceServer) mustEmbedUnimplementedVaccinationRecordServiceServer() {
}
func (UnimplementedVaccinationRecordServiceServer) testEmbeddedByValue() {}

// UnsafeVaccinationRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaccinationRecordServiceServer will
// result in compilation errors.
type UnsafeVaccinationRecordServiceServer interface {
	mustEmbedUnimplementedVaccinationRecordServiceServer()
}

func RegisterVaccinationRecordServiceServer(s grpc.ServiceRegistrar, srv VaccinationRecordServiceServer) {
	// If the following call pancis, it indicates UnimplementedVaccinationRecordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VaccinationRecordService_ServiceDesc, srv)
}

func _VaccinationRecordService_CreateVaccinationRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVaccinationRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaccinationRecordServiceServer).CreateVaccinationRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaccinationRecordService_CreateVaccinationRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaccinationRecordServiceServer).CreateVaccinationRecord(ctx, req.(*CreateVaccinationRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaccinationRecordService_GetVaccinationRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVaccinationRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaccinationRecordServiceServer).GetVaccinationRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaccinationRecordService_GetVaccinationRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaccinationRecordServiceServer).GetVaccinationRecord(ctx, req.(*GetVaccinationRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaccinationRecordService_UpdateVaccinationRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVaccinationRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaccinationRecordServiceServer).UpdateVaccinationRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaccinationRecordService_UpdateVaccinationRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaccinationRecordServiceServer).UpdateVaccinationRecord(ctx, req.(*UpdateVaccinationRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaccinationRecordService_DeleteVaccinationRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVaccinationRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaccinationRecordServiceServer).DeleteVaccinationRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaccinationRecordService_DeleteVaccinationRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaccinationRecordServiceServer).DeleteVaccinationRecord(ctx, req.(*DeleteVaccinationRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VaccinationRecordService_ServiceDesc is the grpc.ServiceDesc for VaccinationRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VaccinationRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.livestock.VaccinationRecordService",
	HandlerType: (*VaccinationRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVaccinationRecord",
			Handler:    _VaccinationRecordService_CreateVaccinationRecord_Handler,
		},
		{
			MethodName: "GetVaccinationRecord",
			Handler:    _VaccinationRecordService_GetVaccinationRecord_Handler,
		},
		{
			MethodName: "UpdateVaccinationRecord",
			Handler:    _VaccinationRecordService_UpdateVaccinationRecord_Handler,
		},
		{
			MethodName: "DeleteVaccinationRecord",
			Handler:    _VaccinationRecordService_DeleteVaccinationRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/livestock/vaccination_record.proto",
}
