// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: v1/production_record.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductionRecordService_GetProductionRecordById_FullMethodName = "/proto.v1.ProductionRecordService/GetProductionRecordById"
	ProductionRecordService_GetProductionRecords_FullMethodName    = "/proto.v1.ProductionRecordService/GetProductionRecords"
	ProductionRecordService_CreateProductionRecord_FullMethodName  = "/proto.v1.ProductionRecordService/CreateProductionRecord"
	ProductionRecordService_UpdateProductionRecord_FullMethodName  = "/proto.v1.ProductionRecordService/UpdateProductionRecord"
	ProductionRecordService_DeleteProductionRecord_FullMethodName  = "/proto.v1.ProductionRecordService/DeleteProductionRecord"
)

// ProductionRecordServiceClient is the client API for ProductionRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductionRecordServiceClient interface {
	GetProductionRecordById(ctx context.Context, in *GetProductionRecordByIdRequest, opts ...grpc.CallOption) (*GetProductionRecordByIdResponse, error)
	GetProductionRecords(ctx context.Context, in *GetProductionRecordsRequest, opts ...grpc.CallOption) (*GetProductionRecordsResponse, error)
	CreateProductionRecord(ctx context.Context, in *CreateProductionRecordRequest, opts ...grpc.CallOption) (*CreateProductionRecordResponse, error)
	UpdateProductionRecord(ctx context.Context, in *UpdateProductionRecordRequest, opts ...grpc.CallOption) (*UpdateProductionRecordResponse, error)
	DeleteProductionRecord(ctx context.Context, in *DeleteProductionRecordRequest, opts ...grpc.CallOption) (*DeleteProductionRecordResponse, error)
}

type productionRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductionRecordServiceClient(cc grpc.ClientConnInterface) ProductionRecordServiceClient {
	return &productionRecordServiceClient{cc}
}

func (c *productionRecordServiceClient) GetProductionRecordById(ctx context.Context, in *GetProductionRecordByIdRequest, opts ...grpc.CallOption) (*GetProductionRecordByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductionRecordByIdResponse)
	err := c.cc.Invoke(ctx, ProductionRecordService_GetProductionRecordById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionRecordServiceClient) GetProductionRecords(ctx context.Context, in *GetProductionRecordsRequest, opts ...grpc.CallOption) (*GetProductionRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductionRecordsResponse)
	err := c.cc.Invoke(ctx, ProductionRecordService_GetProductionRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionRecordServiceClient) CreateProductionRecord(ctx context.Context, in *CreateProductionRecordRequest, opts ...grpc.CallOption) (*CreateProductionRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProductionRecordResponse)
	err := c.cc.Invoke(ctx, ProductionRecordService_CreateProductionRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionRecordServiceClient) UpdateProductionRecord(ctx context.Context, in *UpdateProductionRecordRequest, opts ...grpc.CallOption) (*UpdateProductionRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductionRecordResponse)
	err := c.cc.Invoke(ctx, ProductionRecordService_UpdateProductionRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionRecordServiceClient) DeleteProductionRecord(ctx context.Context, in *DeleteProductionRecordRequest, opts ...grpc.CallOption) (*DeleteProductionRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductionRecordResponse)
	err := c.cc.Invoke(ctx, ProductionRecordService_DeleteProductionRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductionRecordServiceServer is the server API for ProductionRecordService service.
// All implementations must embed UnimplementedProductionRecordServiceServer
// for forward compatibility.
type ProductionRecordServiceServer interface {
	GetProductionRecordById(context.Context, *GetProductionRecordByIdRequest) (*GetProductionRecordByIdResponse, error)
	GetProductionRecords(context.Context, *GetProductionRecordsRequest) (*GetProductionRecordsResponse, error)
	CreateProductionRecord(context.Context, *CreateProductionRecordRequest) (*CreateProductionRecordResponse, error)
	UpdateProductionRecord(context.Context, *UpdateProductionRecordRequest) (*UpdateProductionRecordResponse, error)
	DeleteProductionRecord(context.Context, *DeleteProductionRecordRequest) (*DeleteProductionRecordResponse, error)
	mustEmbedUnimplementedProductionRecordServiceServer()
}

// UnimplementedProductionRecordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductionRecordServiceServer struct{}

func (UnimplementedProductionRecordServiceServer) GetProductionRecordById(context.Context, *GetProductionRecordByIdRequest) (*GetProductionRecordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductionRecordById not implemented")
}
func (UnimplementedProductionRecordServiceServer) GetProductionRecords(context.Context, *GetProductionRecordsRequest) (*GetProductionRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductionRecords not implemented")
}
func (UnimplementedProductionRecordServiceServer) CreateProductionRecord(context.Context, *CreateProductionRecordRequest) (*CreateProductionRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductionRecord not implemented")
}
func (UnimplementedProductionRecordServiceServer) UpdateProductionRecord(context.Context, *UpdateProductionRecordRequest) (*UpdateProductionRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductionRecord not implemented")
}
func (UnimplementedProductionRecordServiceServer) DeleteProductionRecord(context.Context, *DeleteProductionRecordRequest) (*DeleteProductionRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductionRecord not implemented")
}
func (UnimplementedProductionRecordServiceServer) mustEmbedUnimplementedProductionRecordServiceServer() {
}
func (UnimplementedProductionRecordServiceServer) testEmbeddedByValue() {}

// UnsafeProductionRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductionRecordServiceServer will
// result in compilation errors.
type UnsafeProductionRecordServiceServer interface {
	mustEmbedUnimplementedProductionRecordServiceServer()
}

func RegisterProductionRecordServiceServer(s grpc.ServiceRegistrar, srv ProductionRecordServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductionRecordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductionRecordService_ServiceDesc, srv)
}

func _ProductionRecordService_GetProductionRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductionRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductionRecordServiceServer).GetProductionRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductionRecordService_GetProductionRecordById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductionRecordServiceServer).GetProductionRecordById(ctx, req.(*GetProductionRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductionRecordService_GetProductionRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductionRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductionRecordServiceServer).GetProductionRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductionRecordService_GetProductionRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductionRecordServiceServer).GetProductionRecords(ctx, req.(*GetProductionRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductionRecordService_CreateProductionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductionRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductionRecordServiceServer).CreateProductionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductionRecordService_CreateProductionRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductionRecordServiceServer).CreateProductionRecord(ctx, req.(*CreateProductionRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductionRecordService_UpdateProductionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductionRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductionRecordServiceServer).UpdateProductionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductionRecordService_UpdateProductionRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductionRecordServiceServer).UpdateProductionRecord(ctx, req.(*UpdateProductionRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductionRecordService_DeleteProductionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductionRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductionRecordServiceServer).DeleteProductionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductionRecordService_DeleteProductionRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductionRecordServiceServer).DeleteProductionRecord(ctx, req.(*DeleteProductionRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductionRecordService_ServiceDesc is the grpc.ServiceDesc for ProductionRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductionRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.ProductionRecordService",
	HandlerType: (*ProductionRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductionRecordById",
			Handler:    _ProductionRecordService_GetProductionRecordById_Handler,
		},
		{
			MethodName: "GetProductionRecords",
			Handler:    _ProductionRecordService_GetProductionRecords_Handler,
		},
		{
			MethodName: "CreateProductionRecord",
			Handler:    _ProductionRecordService_CreateProductionRecord_Handler,
		},
		{
			MethodName: "UpdateProductionRecord",
			Handler:    _ProductionRecordService_UpdateProductionRecord_Handler,
		},
		{
			MethodName: "DeleteProductionRecord",
			Handler:    _ProductionRecordService_DeleteProductionRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/production_record.proto",
}
