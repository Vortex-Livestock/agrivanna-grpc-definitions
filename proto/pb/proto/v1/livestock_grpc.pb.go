// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/v1/livestock.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LivestockService_CreateLivestock_FullMethodName      = "/proto.v1.LivestockService/CreateLivestock"
	LivestockService_GetLivestock_FullMethodName         = "/proto.v1.LivestockService/GetLivestock"
	LivestockService_GetLivestockByFarmId_FullMethodName = "/proto.v1.LivestockService/GetLivestockByFarmId"
	LivestockService_UpdateLivestock_FullMethodName      = "/proto.v1.LivestockService/UpdateLivestock"
	LivestockService_DeleteLivestock_FullMethodName      = "/proto.v1.LivestockService/DeleteLivestock"
)

// LivestockServiceClient is the client API for LivestockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LivestockServiceClient interface {
	CreateLivestock(ctx context.Context, in *CreateLivestockRequest, opts ...grpc.CallOption) (*CreateLivestockResponse, error)
	GetLivestock(ctx context.Context, in *GetLivestockRequest, opts ...grpc.CallOption) (*GetLivestockResponse, error)
	GetLivestockByFarmId(ctx context.Context, in *GetLivestockByFarmIdRequest, opts ...grpc.CallOption) (*GetLivestockByFarmIdResponse, error)
	UpdateLivestock(ctx context.Context, in *UpdateLivestockRequest, opts ...grpc.CallOption) (*UpdateLivestockResponse, error)
	DeleteLivestock(ctx context.Context, in *DeleteLivestockRequest, opts ...grpc.CallOption) (*DeleteLivestockResponse, error)
}

type livestockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLivestockServiceClient(cc grpc.ClientConnInterface) LivestockServiceClient {
	return &livestockServiceClient{cc}
}

func (c *livestockServiceClient) CreateLivestock(ctx context.Context, in *CreateLivestockRequest, opts ...grpc.CallOption) (*CreateLivestockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLivestockResponse)
	err := c.cc.Invoke(ctx, LivestockService_CreateLivestock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livestockServiceClient) GetLivestock(ctx context.Context, in *GetLivestockRequest, opts ...grpc.CallOption) (*GetLivestockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLivestockResponse)
	err := c.cc.Invoke(ctx, LivestockService_GetLivestock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livestockServiceClient) GetLivestockByFarmId(ctx context.Context, in *GetLivestockByFarmIdRequest, opts ...grpc.CallOption) (*GetLivestockByFarmIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLivestockByFarmIdResponse)
	err := c.cc.Invoke(ctx, LivestockService_GetLivestockByFarmId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livestockServiceClient) UpdateLivestock(ctx context.Context, in *UpdateLivestockRequest, opts ...grpc.CallOption) (*UpdateLivestockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLivestockResponse)
	err := c.cc.Invoke(ctx, LivestockService_UpdateLivestock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livestockServiceClient) DeleteLivestock(ctx context.Context, in *DeleteLivestockRequest, opts ...grpc.CallOption) (*DeleteLivestockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLivestockResponse)
	err := c.cc.Invoke(ctx, LivestockService_DeleteLivestock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LivestockServiceServer is the server API for LivestockService service.
// All implementations must embed UnimplementedLivestockServiceServer
// for forward compatibility.
type LivestockServiceServer interface {
	CreateLivestock(context.Context, *CreateLivestockRequest) (*CreateLivestockResponse, error)
	GetLivestock(context.Context, *GetLivestockRequest) (*GetLivestockResponse, error)
	GetLivestockByFarmId(context.Context, *GetLivestockByFarmIdRequest) (*GetLivestockByFarmIdResponse, error)
	UpdateLivestock(context.Context, *UpdateLivestockRequest) (*UpdateLivestockResponse, error)
	DeleteLivestock(context.Context, *DeleteLivestockRequest) (*DeleteLivestockResponse, error)
	mustEmbedUnimplementedLivestockServiceServer()
}

// UnimplementedLivestockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLivestockServiceServer struct{}

func (UnimplementedLivestockServiceServer) CreateLivestock(context.Context, *CreateLivestockRequest) (*CreateLivestockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLivestock not implemented")
}
func (UnimplementedLivestockServiceServer) GetLivestock(context.Context, *GetLivestockRequest) (*GetLivestockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLivestock not implemented")
}
func (UnimplementedLivestockServiceServer) GetLivestockByFarmId(context.Context, *GetLivestockByFarmIdRequest) (*GetLivestockByFarmIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLivestockByFarmId not implemented")
}
func (UnimplementedLivestockServiceServer) UpdateLivestock(context.Context, *UpdateLivestockRequest) (*UpdateLivestockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLivestock not implemented")
}
func (UnimplementedLivestockServiceServer) DeleteLivestock(context.Context, *DeleteLivestockRequest) (*DeleteLivestockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLivestock not implemented")
}
func (UnimplementedLivestockServiceServer) mustEmbedUnimplementedLivestockServiceServer() {}
func (UnimplementedLivestockServiceServer) testEmbeddedByValue()                          {}

// UnsafeLivestockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LivestockServiceServer will
// result in compilation errors.
type UnsafeLivestockServiceServer interface {
	mustEmbedUnimplementedLivestockServiceServer()
}

func RegisterLivestockServiceServer(s grpc.ServiceRegistrar, srv LivestockServiceServer) {
	// If the following call pancis, it indicates UnimplementedLivestockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LivestockService_ServiceDesc, srv)
}

func _LivestockService_CreateLivestock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLivestockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivestockServiceServer).CreateLivestock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LivestockService_CreateLivestock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivestockServiceServer).CreateLivestock(ctx, req.(*CreateLivestockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivestockService_GetLivestock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLivestockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivestockServiceServer).GetLivestock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LivestockService_GetLivestock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivestockServiceServer).GetLivestock(ctx, req.(*GetLivestockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivestockService_GetLivestockByFarmId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLivestockByFarmIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivestockServiceServer).GetLivestockByFarmId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LivestockService_GetLivestockByFarmId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivestockServiceServer).GetLivestockByFarmId(ctx, req.(*GetLivestockByFarmIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivestockService_UpdateLivestock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLivestockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivestockServiceServer).UpdateLivestock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LivestockService_UpdateLivestock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivestockServiceServer).UpdateLivestock(ctx, req.(*UpdateLivestockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivestockService_DeleteLivestock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLivestockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivestockServiceServer).DeleteLivestock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LivestockService_DeleteLivestock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivestockServiceServer).DeleteLivestock(ctx, req.(*DeleteLivestockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LivestockService_ServiceDesc is the grpc.ServiceDesc for LivestockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LivestockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.LivestockService",
	HandlerType: (*LivestockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLivestock",
			Handler:    _LivestockService_CreateLivestock_Handler,
		},
		{
			MethodName: "GetLivestock",
			Handler:    _LivestockService_GetLivestock_Handler,
		},
		{
			MethodName: "GetLivestockByFarmId",
			Handler:    _LivestockService_GetLivestockByFarmId_Handler,
		},
		{
			MethodName: "UpdateLivestock",
			Handler:    _LivestockService_UpdateLivestock_Handler,
		},
		{
			MethodName: "DeleteLivestock",
			Handler:    _LivestockService_DeleteLivestock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/livestock.proto",
}
