// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/v1/temperature_record.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TemperatureRecordService_CreateTemperatureRecord_FullMethodName = "/proto.v1.TemperatureRecordService/CreateTemperatureRecord"
	TemperatureRecordService_GetTemperatureRecord_FullMethodName    = "/proto.v1.TemperatureRecordService/GetTemperatureRecord"
	TemperatureRecordService_UpdateTemperatureRecord_FullMethodName = "/proto.v1.TemperatureRecordService/UpdateTemperatureRecord"
	TemperatureRecordService_DeleteTemperatureRecord_FullMethodName = "/proto.v1.TemperatureRecordService/DeleteTemperatureRecord"
)

// TemperatureRecordServiceClient is the client API for TemperatureRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemperatureRecordServiceClient interface {
	CreateTemperatureRecord(ctx context.Context, in *CreateTemperatureRecordRequest, opts ...grpc.CallOption) (*CreateTemperatureRecordResponse, error)
	GetTemperatureRecord(ctx context.Context, in *GetTemperatureRecordRequest, opts ...grpc.CallOption) (*GetTemperatureRecordResponse, error)
	UpdateTemperatureRecord(ctx context.Context, in *UpdateTemperatureRecordRequest, opts ...grpc.CallOption) (*UpdateTemperatureRecordResponse, error)
	DeleteTemperatureRecord(ctx context.Context, in *DeleteTemperatureRecordRequest, opts ...grpc.CallOption) (*DeleteTemperatureRecordResponse, error)
}

type temperatureRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemperatureRecordServiceClient(cc grpc.ClientConnInterface) TemperatureRecordServiceClient {
	return &temperatureRecordServiceClient{cc}
}

func (c *temperatureRecordServiceClient) CreateTemperatureRecord(ctx context.Context, in *CreateTemperatureRecordRequest, opts ...grpc.CallOption) (*CreateTemperatureRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTemperatureRecordResponse)
	err := c.cc.Invoke(ctx, TemperatureRecordService_CreateTemperatureRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureRecordServiceClient) GetTemperatureRecord(ctx context.Context, in *GetTemperatureRecordRequest, opts ...grpc.CallOption) (*GetTemperatureRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemperatureRecordResponse)
	err := c.cc.Invoke(ctx, TemperatureRecordService_GetTemperatureRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureRecordServiceClient) UpdateTemperatureRecord(ctx context.Context, in *UpdateTemperatureRecordRequest, opts ...grpc.CallOption) (*UpdateTemperatureRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTemperatureRecordResponse)
	err := c.cc.Invoke(ctx, TemperatureRecordService_UpdateTemperatureRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureRecordServiceClient) DeleteTemperatureRecord(ctx context.Context, in *DeleteTemperatureRecordRequest, opts ...grpc.CallOption) (*DeleteTemperatureRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTemperatureRecordResponse)
	err := c.cc.Invoke(ctx, TemperatureRecordService_DeleteTemperatureRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemperatureRecordServiceServer is the server API for TemperatureRecordService service.
// All implementations must embed UnimplementedTemperatureRecordServiceServer
// for forward compatibility.
type TemperatureRecordServiceServer interface {
	CreateTemperatureRecord(context.Context, *CreateTemperatureRecordRequest) (*CreateTemperatureRecordResponse, error)
	GetTemperatureRecord(context.Context, *GetTemperatureRecordRequest) (*GetTemperatureRecordResponse, error)
	UpdateTemperatureRecord(context.Context, *UpdateTemperatureRecordRequest) (*UpdateTemperatureRecordResponse, error)
	DeleteTemperatureRecord(context.Context, *DeleteTemperatureRecordRequest) (*DeleteTemperatureRecordResponse, error)
	mustEmbedUnimplementedTemperatureRecordServiceServer()
}

// UnimplementedTemperatureRecordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTemperatureRecordServiceServer struct{}

func (UnimplementedTemperatureRecordServiceServer) CreateTemperatureRecord(context.Context, *CreateTemperatureRecordRequest) (*CreateTemperatureRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemperatureRecord not implemented")
}
func (UnimplementedTemperatureRecordServiceServer) GetTemperatureRecord(context.Context, *GetTemperatureRecordRequest) (*GetTemperatureRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemperatureRecord not implemented")
}
func (UnimplementedTemperatureRecordServiceServer) UpdateTemperatureRecord(context.Context, *UpdateTemperatureRecordRequest) (*UpdateTemperatureRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemperatureRecord not implemented")
}
func (UnimplementedTemperatureRecordServiceServer) DeleteTemperatureRecord(context.Context, *DeleteTemperatureRecordRequest) (*DeleteTemperatureRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemperatureRecord not implemented")
}
func (UnimplementedTemperatureRecordServiceServer) mustEmbedUnimplementedTemperatureRecordServiceServer() {
}
func (UnimplementedTemperatureRecordServiceServer) testEmbeddedByValue() {}

// UnsafeTemperatureRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemperatureRecordServiceServer will
// result in compilation errors.
type UnsafeTemperatureRecordServiceServer interface {
	mustEmbedUnimplementedTemperatureRecordServiceServer()
}

func RegisterTemperatureRecordServiceServer(s grpc.ServiceRegistrar, srv TemperatureRecordServiceServer) {
	// If the following call pancis, it indicates UnimplementedTemperatureRecordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TemperatureRecordService_ServiceDesc, srv)
}

func _TemperatureRecordService_CreateTemperatureRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemperatureRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureRecordServiceServer).CreateTemperatureRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemperatureRecordService_CreateTemperatureRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureRecordServiceServer).CreateTemperatureRecord(ctx, req.(*CreateTemperatureRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureRecordService_GetTemperatureRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemperatureRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureRecordServiceServer).GetTemperatureRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemperatureRecordService_GetTemperatureRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureRecordServiceServer).GetTemperatureRecord(ctx, req.(*GetTemperatureRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureRecordService_UpdateTemperatureRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemperatureRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureRecordServiceServer).UpdateTemperatureRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemperatureRecordService_UpdateTemperatureRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureRecordServiceServer).UpdateTemperatureRecord(ctx, req.(*UpdateTemperatureRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureRecordService_DeleteTemperatureRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemperatureRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureRecordServiceServer).DeleteTemperatureRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemperatureRecordService_DeleteTemperatureRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureRecordServiceServer).DeleteTemperatureRecord(ctx, req.(*DeleteTemperatureRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemperatureRecordService_ServiceDesc is the grpc.ServiceDesc for TemperatureRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemperatureRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.TemperatureRecordService",
	HandlerType: (*TemperatureRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTemperatureRecord",
			Handler:    _TemperatureRecordService_CreateTemperatureRecord_Handler,
		},
		{
			MethodName: "GetTemperatureRecord",
			Handler:    _TemperatureRecordService_GetTemperatureRecord_Handler,
		},
		{
			MethodName: "UpdateTemperatureRecord",
			Handler:    _TemperatureRecordService_UpdateTemperatureRecord_Handler,
		},
		{
			MethodName: "DeleteTemperatureRecord",
			Handler:    _TemperatureRecordService_DeleteTemperatureRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/temperature_record.proto",
}
